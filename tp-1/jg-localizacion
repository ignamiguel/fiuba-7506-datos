###########PRIMERO HAY QUE ARMAR EL DATAFRAME 'AVISOS' CON LA SCRIPT DE MASTER##################

%matplotlib inline
from bokeh.plotting import figure, show
import string as string
import datetime as datetime
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
geolocator = Nominatim()
from bokeh.io import output_file, output_notebook, show
from bokeh.models import (
  GMapPlot, GMapOptions, ColumnDataSource, Circle, LogColorMapper, BasicTicker, ColorBar,
    DataRange1d, Range1d, PanTool, WheelZoomTool, BoxSelectTool
)
from bokeh.models.mappers import ColorMapper, LinearColorMapper
from bokeh.palettes import Viridis5


plt.style.use('default') ### haciendo los graficos un poco mas bonitos xD
plt.rcParams['figure.figsize'] = (15, 5)


avisos = pd.read_csv('/home/pcsor/facu/datos_navent_fiuba/avisos.csv', sep=',', encoding='utf-8', low_memory=False)

map_options = GMapOptions(lat=-34.606719800, lng=-58.435779700, map_type="roadmap", zoom=12)
### lo centro el mapa en Parque Centenario

plot = GMapPlot(
    x_range=Range1d(), y_range=Range1d(), map_options=map_options
)

plot.title.text = "Mapa de los avisos"

# For GMaps to function, Google requires you obtain and enable an API key:
#
#     https://developers.google.com/maps/documentation/javascript/get-api-key
#
# Replace the value below with your personal API key:
plot.api_key = "AIzaSyBejhbN4aI3s376JNh_yNMO_VC0uGs5Nk4"

source = ColumnDataSource(
    data=dict(
        lat=avisos.lat.tolist(),
        lon=avisos.long.tolist(),
        #size=housing.median_income.tolist(),
        #color=housing.median_house_value.tolist()
    )
)
#max_median_house_value = housing.loc[housing['median_house_value'].idxmax()]['median_house_value']
#min_median_house_value = housing.loc[housing['median_house_value'].idxmin()]['median_house_value']

#color_mapper = CategoricalColorMapper(factors=['hi', 'lo'], palette=[RdBu3[2], RdBu3[0]])
#color_mapper = LogColorMapper(palette="Viridis5", low=min_median_house_value, high=max_median_house_value)

circle = Circle(x="lon", y="lat")
plot.add_glyph(source, circle)

plot.add_tools(PanTool(), WheelZoomTool(), BoxSelectTool())
output_file("gmap_plot.html")
output_notebook()

show(plot)


